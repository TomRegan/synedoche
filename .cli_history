ev
addi $t0,$zero,32
pr registers
pr register 8
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
ev
addi $t0,$zero,32
pr registers
slt $t0,$s0,$t0
ev
slt $t0,$s0,$t0
pr registers
ev
slt $t0,$s0,$t0
ev
slt $t0,$s0,$t0
pr registers
addi $t1,$zero,2
ev
addi $t1,$zero,2
ev
addi $t2,$zero,1
ev
slt $t0,$t2,$t1
pr registers
ev
slt $t0,$t1,$t2
pr registers
ev
addi $t2,$zero,1
pr registers
ev
addi $t2,$zero,1
pr registers
ev
addi $t2,$zero,1
pr registers
ev
addi $t2,$zero,1
pr registers
pr register 8
pr register 10
ev
addi $t2,$zero,1
pr registers
fg
ev
addi $t2,$zero,1
pr registers
fg
ev
addi $t2,$zero,1
addi $t1,$zero,2
ev
addi $t1,$zero,2
pr registers
ev
slt $t0,$t1,$t2
print registers
quit
ev
end
ev
addi $t0,$zero,2
addi $t1,$zero,2
addi $t2,$zero,1
slt  $t0,$t1,$t2 #there seems to be a problem here
end
print registers
addi $gp,$zero,1
ev
addi $gp,$zero,1
end
print registers
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
fg
end
ev
addi $gp, $sp        $zero
ev
addi $gp, $sp        $zero
addi $gp, $sp   ,     $zero
addi $gp, $sp,     $zero
addi $gp, $sp, $zero
addi $t0,$t1,32
add $gp, $sp, $zero
add $gp, $sp           $zero
add $gp, $sp    ,       $zero
add $gp, $sp,           $zero
end
print registers
print reg 4
ev
end
pr reg
ev
pr reg
help
pr pi
ev
addi $t0,$zero,64
end
pr pi
pr reg
pr reg 8
ev
addi $t0,$zero,64
end
\e
\q
pr pi
pr reg 8
ev
addi $t1,$zero,-10
end
pr reg 9
pr reg
ev
addi $t1,$zero,-10
end
pr pi
ev
addi $t1,$zero,-10
end
pr pi
fg
ev
addi $t1,$zero,-10
end
pr pu
pr pi
ev
addi $t1,$zero,10
end
pr pi
\e
fg
\e
\\e
\e
ev
addi $t1,$zero,10
\e
pr pi
fg
ev
addi $t1,$zero,10
\e
pr pi
pr reg 9
ev
addi $t1,$zero,10
\e
pr pi
pr reg
\e
eval
addi $t0,$zero,1000
pr reg 8
end
pr reg 8
ev
lw $t0,0($sp)
ev
lw $t0,0($sp)
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
fg
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
fg
ev
addi $t0,$zero,1000
fg
pr reg
pr pi
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
\w
\e 
\e
pr pi
ev
addi $t0,$zero,1000
end
pr reg
pr pi
ev
addi $t0,$zero,1000
ev
addi $t0,$zero,1000
end
pr pi
fg
ev
addi $t0,$zero,1000
pr pi
end
pr pi
ev
addi $t0,$zero,1000
\e
pr pi
ev
addi $t0,$zero,1000
\e
pr pi
pr reg
pr pi
pr reg
help
print registers
print pipeline
show
help
exit
ev
\e 
ev
addi $t0,$zero,1000
\e
'e
\e
ev
addi $t0,$zero,1000
sub $t1,$sp,$t0
\e
pr reg
\e
ev
\d
\e
ev
\d
sub $t1,$sp,$t0
\e
pr reg
ev
\d
status
ev
\d
disconnected
status
ev
'd
\d
status
\d
ev
\d
ev
\d
ev
\d
toggle bool_prop dis
ev
\d
ev
\d
fg
ev
\d
ev
\d
ev
\d
toggle bool_prop disconnected
addi $t0,$zero,1024
\e
pr reg
status
ev
status
\d
status
ev
status
ev
add $s0,$zero,1
addi $s0,$zero,1
\d
list bool
\l
\e
'e
\e
ev
\l
help
addi $s1,$zero,2
slt $t0,$s1,$s2
\e
pr reg
pr pi
\e
ev
addi $s1,$zero,2
\e
pr memory
ev
addi $s1,$zero,2
\e
pr memory
ev
status
\e
pr reg
pr mem
ev
addi $s1,$zero,2
\e
pr mem
pr reg
ev
addi $s1,$zero,2
\e
pr mem
ev
addi $s1,$zero,2
pr mem
ev
addi $s1,$zero,2
pr mem
ev
addi $s1,$zero,2
pr mem
fg
help
ev
status
\l
\s
ev
\l
\d
\c
addi $s1,$zero,2
\d
addi $s1,$zero,2
\d
\l
ev
addi $s1,$zero,2
ev
\l
\c
\l
\d
\l
addi $s1,$zero,2
\d
addi $s1,$zero,2
pr reg
ev
addi $s1,$zero,2
pr reg
pr mem
pr mem 10
pr mem 100
ev
addi $s1,$zero,2
pr mem
ev
addi $s1,$zero,2
pr mem
ev
\d
\l
ev
addi $t0,$zero,10
sw $t0,0($sp)
ev
addi $t0,$zero,10
sw $t0,0($sp)
fg
ev
addi $t0,$zero,10
sw $t0,0($sp)
pr mem
pr reg
ev
lw $v0,0($sp)
pr reg
ev
addi $t0,$zero,10
\d
lw $v0,0($sp)
ev
sw $t0,0($sp)
ev
addi $t0,$zero,255
\d
sw $t0,0($sp)
lw $v0,0($sp)
print reg
ev
lw $v0,0($sp)
ev
lw $v0,0($sp)
fg
lw $v0,0($sp)
ev
lw $v0,0($sp)
ev
lw $v0,0($sp)
ev
lw $v0,0($sp)
addi $t0,$zero,255
sw $t0,0($sp)
lw $v0,0($sp)
pr reg
addi $t0,$zero,255
ev
addi $t0,$zero,255
sw $t0,0($sp)
lw $v0,0($sp)
pr reg
ev
addi $t0,$zero,255
sw $t0,0($sp)
lw $v0,0($sp)
pr reg
ev
addi $t0,$zero,255
sw $t0,0($sp)
lw $v0,0($sp)
fg
ev
addi $t0,$zero,255
sw $t0,0($sp)
lw $v0,0($sp)
ev
addi $t0,$zero,255
sw $t0,0($sp)
lw $v0,0($sp)
pr reg
pr mem
ev
\c
\d
\l
toggle bool_prop connected
\l
!!
addi $t0,$zero,1023
addi $t9,$zero,1
sub $sp,$sp,$t9
pr reg
ev
sub $sp,$sp,$t9
pr reg 29
sw $t0,0($sp)
ev
sw $t0,0($sp)
addi $t1,$zero,255
addi $t2,$zero,127
addi $t3,$zero,63
sw $t1,1($sp)
sw $t2,2($sp)
sw $t3,3($sp)
pr reg
ev
addi $sp,$sp,4
pr reg
pr mem
pr reg
pr mem
pr pi
ev
addi $s0,$zero,255
addi $s1,$zero,255
addi $s2,$zero,255
addi $s3,$zero,255
addi $s4,$zero,255
addi $s5,$zero,255
addi $s6,$zero,255
addi $s7,$zero,255
addi $s8,$zero,255
pr reg
sw $sp,0($sp)
ev
sw $sp,0($sp)
lw $at,0($sp)
pr reg
add 8,9,10
add $8,$9,$10
ev
add $8,$9,$10
add 8,9,10
\l
\d
\e
ev
\e\e
\e \e
\e
pr pi
fg
except
ev
asdd
ev
sadgb
fg
ev
asddgfb
fg
ev
sdfg
ev
asgfv
ev
sdfb
ev
afdbs
ev
asdgfb
fg
ev
asdg
fg
ev
asd
fg
ev
asd
ev
sdfb
ev
sh
ev
asdfb
fg
ev
addi 32,t,y
addi $t0,$zero,1023
things
pr reg
version
help
ev
addi $t0,$zero,1023
things
lw sw
ev
\l
\d
addi $t0,$zero,10
addi $t1,$zero,2
slt $t2,$t0,$t1
pr reg 10
end
pr reg 10
pr reg 8
pr reg 9
ev
slt $t2,$t1,$t0
end
pr reg 10
pr reg 8
pr reg
ev
addi $t0,$zero,10
addi $t1,$zero,10
addi $t2,$zero,20
slt $t0,$t1,$t2
pr reg 8
ev
addi $t0,$zero,10
ev
addi $t0,$zero,10
ev
addi $t0,$zero,10
end
ev
addi $t0,$zero,10
\e
ev
addi $t0,$zero,10
\e
ev
addi $t0,$zero,10
\e
end
pr reg
ev
addi $t0,$zero,10
addi $t1,$zero,1
addi $t2,$zero,2
slt $t0,$t1,$t2
\e
ev
addi $t0,$zero,10
pr reg
ev
\d
addi $t0,$zero,10
pr reg
fg
ev
addi $t0,$zero,10
addi $t1,$zero,10
ev
addi $t0,$zero,10
addi $t1,$zero,10
ev
\d
addi $t1,$zero,10
ev
addi $t0,$zero,10
ev
addi $t1,$zero,10
addi $t0,$zero,10
ev
\d
addi $t0,$zero,10
addi $t1,$zero,10
fg
ev
\
ev
addi $t1,$zero,10
\l
ev
\l
\c
\l
ev
addi $t1,$zero,15
addi $t2,$zero,31
del 0
ev
addi $t1,$zero,15
addi $t2,$zero,31
del 0
ev
addi $t1,$zero,15
addi $t2,$zero,31
del 0
pr reg
ev
addi $t2,$zero,31
del 0
addi $t1,$zero,15
addi $t2,$zero,31
del 3
del1
ev
addi $t1,$zero,7
addi $t2,$zero,15
nop
slt $t0,$t1,$t2
pr reg
ev
\d
ev
\d
nop
ev
nop
addi $t1,$zero,7
ev
nop
ev
nop
eval
nop
eval
nop
addi $t0,$zero,15
eval
addi $t1,$zero,15
addi $t0,$zero,7
stl $t2,$t0,$t1
addi $t1,$zero,7
ev
addi $t1,$zero,7
addi $t2,$zero,15
stl $t0,$t1,$t2
eval
addi $t1,$zero,7
addi $t2,$zero,15
slt $t0,$t1,$t2
pr reg 8
eval
addi $s0,$zero,7
addi $s1,$zero,7
addi $s2,$zero,7
addi $s3,$zero,7
addi $s4,$zero,7
addi $s5,$zero,7
addi $s7,$zero,7
pr reg
eval
addi $s0,$zero,7
addi $s1,$zero,7
addi $s2,$zero,7
addi $s3,$zero,7
addi $s4,$zero,7
addi $s5,$zero,7
addi $s7,$zero,7
addi $s6,$zero,7
rp reg
pr reg
eval
addi $s0,$zero,7
addi $s1,$zero,7
addi $s2,$zero,7
addi $s3,$zero,7
addi $s4,$zero,7
addi $s5,$zero,7
addi $s,$zero,7
ed
ev
addi $s1,$zero,7
addi $s2,$zero,7
addi $s3,$zero,7
addi $s4,$zero,7
addi $s0,$zero,7
pr reg
vers
load add.asm
load 'add.asm'
load add.asm
fg
load asdf
load asfv
load argfb
load aregdfbs
load ../asm/add.asm
load
__except__
load
__except__
step
pr reg
step
pr reg
cycle
pr reg
cycl
pr reg 33
eval
sw pc,0($sp)
eval
\l
eval
asdf
fg
eval
asdfsb
eval
agdfb
fg
eval
things
eval
asdf
eval
abd
eval
things
eval
things
eval
things
eval
tinadsf
eval
asdf
fg
evval
eval
fg
eval
things
fg
eval
things
fg
eval
things
eval
addi $s0,$zero,7
addi $s1,$zero,7
fg
eval
fg
eval
addi $s0,$zero,7
addi $s1,$zero,7
addi $s2,$zero,7
pr reg
eval
#things
load add.asm
cycle
pr reg
step
pr reg
step
pr reg
pr cycle
pr reg
cycle
pr reg
cycle
pr reg
step
pr reg
eval
\e
pr reg 5d
eval
things
pr reg 5
eval
nop
pr reg 5d
eval
addi $t0,$zero,255
pr reg 5d
pr reg 5
eval
nop
pr reg 5
pr reg 5d
eval
nop
pr reg 8
pr reg 8d
pr reg 8x
pr reg 8y
eval
nop
pr reg 8
pr reg 8d
pr reg 8x
eval
nop
pr reg 8
eval
nop
pr reg 8
pr reg 8d
eval
nop
pr reg 8
pr reg 8x
eval
nop
pr reg 8
pr reg 8x
eval
nop
pr reg 8
eval
addi $t0,$zero,255
pr reg 8x
eval
nop
pr reg 8
eval
nop
pr reg 8
eval
addi $t0,$zero,255
pr reg 8
pr reg 8x
pr reg 8b
pr reg
eval
nop
pr reg
step
pr reg
fg
step
pr reg
fg
step 
pr reg
fg
step
pr reg
fg
step
pr reg
cycle
pr reg 21d
pr reg 33d
pr reg 33x
step
pr reg 33x
eval
pr reg 33x
pr reg
cycl
pr reg
pr pipe
eval
addi $t0,$zero,255
addi $t1,$zero,255
addi $t2,$zero,255
pr pipe
eval
nop
addi $t0,$zero,255
pr reg
step
pr reg
eval
nop
eval
fg
eval
nop
eval
fg
eval
nop
eval
nop
pr reg
load add.asm
pr reg
eval
addi $t0,$zero,255
pr reg
load add.asm
pr reg
load myass.asm
pr pipeline
pr mem
eval
end
eval
pr reg
eval
end
eval
pr reg
eval
end
prreg
pre reg
eval
load add.asm
\e
eval
things
pr reg
step
pr reg
step
pr reg
eval
nop
pr reg
reset
rese
pr reg
eval
nop
pr reg
step
eval
pr reg
reset
rese
pr reg
eval
pr reg
rese
pr reg
eval
pr reg
reset
pr reg
cycle
step
pr reg
cycle
pr reg
step
pr reg
reset
pr reg
eval
reset
eval
pr reg
eval
pre reg
eval
fg
eval
pr reg
step
pr reg
reset
pr reg
eval
addi $t0,$zero,255
pr reg
eval
addi $t0,$zero,255
pr reg
eval
addi $t1,$zero,255
pr reg
eval
addi $t1,$zero,255
addi $t0,$zero,255
pr reg
eval
addi $s0,$zero,255
pr reg
eval
addi $t0,$zero,255
pr reg
eval
reset
eval
pr reg
reset
pr reg
eval
addi $t0,$zero,255
pr reg
eval
addi $s0,$zero,255
pr reg
pr reg 16x
pr reg 16d
pr reg 16 d
pr reg 16 b b
eval
addi $t0,$zero,40000000
\e
pr reg
eval
addi $t0,$zero,32000
pr reg
eval
addi $t0,$zero,32000
eval
addi $t0,$zero,32000
pr reg
eval
addi $s0,$zero,255
addi $s1,$zero,255
addi $s2,$zero,1023
pr reg
pr pi
reset
pr pipe
pr reg
reset
eval
fg
reset
pr reg
pr pipe
pr pi
step
pr reg
pr pi
reset
pr pi
step
eval
addi $t0,$zero,1023
pr reg
eval
sw $t0,0($sp)
lw $s0,0($sp)
lw $s1,0($sp)
pr reg
eval
addi $t0,$zero,1023
sw $t0,0($sp)
lw $s0,0($sp)
lw $s1,0($sp)
pr reg
eval
addi $t0,$zero,1023
sw $t0,0($sp)
lw $s0,0($sp)
lw $s1,0($sp)
pr reg
reset
pr reg
pr reg 0
pr reg 32
pr reg 33
print mem
step
print mem
eval
pr mem
cycle
pr mem
eval
pr mem
cycle
pr mem
cycle
pr mem
cycle
pr mem
fg
eval
pr mem
eval
pr mem
step
pr mem
step
pr mem
step
pr mem
eval
pr mem
step
pr mem
step
pr mem
fg
step
pr mem
step
pr mem
pr pipe
fg
step
pr mem
step
pr mem
step
pr mem
step
pr mem
step
pr mem
step
pr mem
eval
addi $t0,$zero,32000
pr reg
eval
addi $t0,$zero,32000
sw $t0,0($sp)
pr mem
fg
step
pr mem
step
pr mem
step
pr mem
step
pr mem
step
pr mem
eval
addi $t0,$zero,32000
sw $t0,0($sp)
pr mem
pr mem 10
pr mem
pr mem 10
step
pr mem 5
step
pr mem
pr emm
pr mem
step
pr mem
pr mem 2
pr mem 5
pr mem
step
pr mem
pr mem 2
pr mem 2d
step
pr mem
pr mem 2
pr mem 5
step
pr mem 2
step 
pr mem
pr mem 2
pr mem 1
pr mem 100
reset
load test.asm
cycle
pr mem
pr reg
step
pr reg
step
pr pipe
pr reg
pr mem
step
pr mem
pr reg
load test.asm
step
pr mem
step
pr mem
step
pr mem
reset
step
pr reg
load test.asm
pr reg
step
pr reg
pr pipeline
step
pr pipe
pr reg
pr mem
step
pr mem
cycle
pr mem
reset
load test.asm
cycle
pr pipe
cycle
pr pipe
pr reg
step
pr reg
step
pr reg
pr mem
cycle
pr mem
cycle
pr mem
quit
load test.asm
cycle
step
pr mem
step
pr mem
pr reg
load test2.asm
step
load test2.asm
cycle
step
pr reg
resetppr reg
reset
pr reg
load test.asm
load test2.asm
pr reg
cycle
pr pipe
cycle
pr reg
pr pipe
step
pr reg 33
pr reg 33h
pr reg 33hx
pr reg 33x
load test2.asm
step
load test2.asm
step
load test2.asm
step
load test2.asm
step
pr reg
step
pr reg
step
pr reg
\e
load test2.asm
step
pr reg
pr pipe
step
pr pipe
pr reg
step
pr pipe
load add.asm
step
pr reg
step
pr reg
step
pr reg
pr pipe
reset
pr reg
eval
addi $t9,$zero,4
sub $sp,$sp,$t9
pr reg
eval
pr reg
eval
addi $t0, $zero, 255
addi $s0,$zero,4
sub $sp, $sp, $s0
sw $t0, 0($sp)
ls
load asm/add.asm
step
pr reg
reset
eval
addi $t0, $zero, 255
addi $s0,$zero,4
sub $sp, $sp, $s0
sw $t0, 0($sp)
pr reg
reset
eval
addi $t0, $zero, 255
addi $s0,$zero,4
sub $sp, $sp, $s0
sw $t0, 0($sp)
lw $t1, 0($sp)
pr reg 9
pr reg
pr mem
\e
load asm/mem_copy.asm
step
pr pipeline
cycle
pr pipeline
pr reg
pr mem
load asm/mem_copy.asm
step
pr mem
pr reg
pr pipeline
/e
\e
load asm/mem_copy.asm
step
pr pi
pr pipeline
pr mem
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
pr reg
load asm/mem_copy.asm
pr mem
load asm/mem_copy.asm
step
pr reg
pr mem
load asm/mem_copy.asm
step
pr mem
pr mem 10
pr mem -10
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
pr mem 10
load asm/mem_copy.asm
step
pr mem
pr mem 10
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
step
pr mem
pr mem 10
pr mem -10
load asm/mem_copy.asm
step
pr mem
step
pr mem
pr mem 10
pr mem -10
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
pr mem 19
load asm/mem_copy.asm
step
pr mem
pr mem 2
load asm/mem_copy.asm
step
pr mem
pr mem 4
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
pr reg
step
pr reg
pr mem
pr reg 29
pr reg 29x
load asm/mem_copy.asm
step
pr reg 29
pr reg 29x
pr reg 29b
pr mem
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
pr mem 10
load asm/mem_copy.asm
step
pr mem
pr mem 10
load asm/mem_copy.asm
step
pr mem
pr mem 10
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
load asm/mem_copy.asm
step
pr mem
pr mem 10
load asm/mem_copy.asm
step
pr mem 10
step
pr mem 10
load asm/mem_copy.asm
step
pr mem
pr mem 2
pr mem 1
load asm/mem_copy.asm
step
pr mem 2
step
pr mem 1
pr mem
pr reg
pr pipe
reset
load asm/mem_copy.asm
cycle
pr pipe
cycl
c
cycle
pr pipe
pr reg 8
pr mem
l asm/mem_copy.asm
s
pr mem 1
pr reg
s
pr reg
pr mem
q
pr asdf
l asm/mem_copy.asm
s
pr reg 29
pr reg 29x
pr mem 1
pr reg
c
pr reg
c
pr reg
pr pi
pr pip
l asm/mem_copy.asm
pr mem
l asm/mem_copy.asm
step
s
pr mm
pr mem
pr reg
pr pip
c
pr reg
pr cycle
c
pr reg
eval
slt   $v0, $t0,  $t1
eval
Main: addi $t0,$zero,255
      j Main
cycle
print pipeline
pr reg
cycle
pr reg
reset
pr reg 33
pr reg 33x
eval
addi $s0,$zero,1024
sub $sp, $sp, $s0
pr reg 29
pr reg 29x
eval
addi $s0,$zero,3
sub $sp, $sp, $s0
addi $s0,$zero,255
sw $s0, 0($sp)
version
fg
version
eval
poops
eval
things
eval
things
eval
things
and that
fg
eval
things
eval
fg
eval
fg
eval
fg
eval
this
fg
eval
things
are
nice
but
fg
eval
things
are
not
the
quick
brown
fox
jumped
over
the 
lazy
dog
also
not
bums
eval
fg
eval
things
like
bums
are
not
so
good
eval
things
eval
\l
\c
eval
\c
addi $t0, $zero, 1023
pr reg
eval
addi $s0, $zero, 1
addi $s1, $zero, 1
seq  $t0, $s1, $s0
ev
eval
addi $s0, $zero, 1
addi $s1, $zero, 1
slt $t0, $s0, $s1
slt $t1, $s1, $s0
slti $t0, $t0, 1
slti $t0, $t1, 1
pr reg 8
pr reg
eval
addi $t0, $zero, -1
pr reg 8
pr reg 8x
addi $s0, $zero, 10
eval
addi $s0, $zero, 10
addi $s1, $s0, -1
pr reg
pr reg 17
eval
nop
pr reg
eval
sigterm
eval
syscall
eval
syscall
eval
addi $v0, $zero, 10
syscall
eval
addi $v0, $zero, 10
syscall
eval
addi $v0, $zero, 10
syscall
eval
addi $v0, $zero, 10
syscall
pr reg
pr pipe
pr mem
fg
pr mem
fg
pr mem
fg
pr mem
eval
addi $s0, $zero 255
eval
addi $s0, $zero, 255
pr reg
load asm/label.asm
load asm/labels.asm
load asm/label.asm
load asm/labels.asm
eval
load asm/labels.asm
